import React, { useState, useEffect } from 'react';
import { format } from 'date-fns';
import './App.css';
import Calendar from './components/Calendar';
import WeekView from './components/WeekView';
import EventModal from './components/EventModal';
import EventList from './components/EventList';
import CategoryManager from './components/CategoryManager';
import { ThemeProvider, useTheme } from './contexts/ThemeContext';
import type { Event, CalendarEvent, EventCategory, CalendarView } from './types';
import { 
  loadEventsFromStorage, 
  saveEventsToStorage, 
  getEventsForDate,
  updateEvent as updateEventUtil,
  deleteEvent as deleteEventUtil
} from './utils/eventUtils';
import { notificationService } from './utils/notificationUtils';
import { exportToICS, exportToJSON, exportToCSV, downloadFile, importFromJSON, importFromCSV } from './utils/exportUtils';
import { LanguageProvider, useLanguage } from './contexts/LanguageContext';

const defaultCategories: EventCategory[] = [
  { id: 'work', name: 'Work', color: '#3B82F6', icon: '💼' },
  { id: 'personal', name: 'Personal', color: '#10B981', icon: '👤' },
  { id: 'health', name: 'Health', color: '#EF4444', icon: '🏥' },
  { id: 'travel', name: 'Travel', color: '#F59E0B', icon: '✈️' },
  { id: 'uncategorized', name: 'Uncategorized', color: '#6B7280', icon: '📅' },
];

const calendarViews: CalendarView[] = [
  { type: 'month', title: 'Month', icon: '📅' },
  { type: 'week', title: 'Week', icon: '📆' },
];

const AppContent: React.FC = () => {
  const { theme, isDark, toggleTheme } = useTheme();
  const { language, toggleLanguage } = useLanguage();
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [events, setEvents] = useState<Event[]>([]);
  const [categories, setCategories] = useState<EventCategory[]>(defaultCategories);
  const [currentView, setCurrentView] = useState<'month' | 'week'>('month');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isCategoryManagerOpen, setIsCategoryManagerOpen] = useState(false);
  const [editingEvent, setEditingEvent] = useState<Event | undefined>();
  const [selectedDateForModal, setSelectedDateForModal] = useState<string>('');

  // Load events and categories from localStorage on mount
  useEffect(() => {
    const savedEvents = loadEventsFromStorage();
    const savedCategories = localStorage.getItem('calendar-categories');
    setEvents(savedEvents);
    if (savedCategories) {
      setCategories(JSON.parse(savedCategories));
    }
  }, []);

  // Save events and categories to localStorage whenever they change
  useEffect(() => {
    saveEventsToStorage(events);
  }, [events]);

  useEffect(() => {
    localStorage.setItem('calendar-categories', JSON.stringify(categories));
  }, [categories]);

  // Request notification permission on mount
  useEffect(() => {
    notificationService.requestPermission();
  }, []);

  const handleDateSelect = (date: Date) => {
    setSelectedDate(date);
  };

  const handleAddEvent = (date: string, time?: string) => {
    setSelectedDateForModal(date);
    setEditingEvent(undefined);
    setIsModalOpen(true);
  };

  const handleEditEvent = (event: CalendarEvent) => {
    setEditingEvent(event);
    setSelectedDateForModal(event.date);
    setIsModalOpen(true);
  };

  const handleDeleteEvent = (eventId: string) => {
    if (window.confirm('Are you sure you want to delete this event?')) {
      const updatedEvents = deleteEventUtil(events, eventId);
      setEvents(updatedEvents);
    }
  };

  const handleSaveEvent = (event: Event) => {
    if (editingEvent) {
      const updatedEvents = updateEventUtil(events, event.id, event);
      setEvents(updatedEvents);
    } else {
      setEvents([...events, event]);
    }
  };

  const handleSaveCategory = (category: EventCategory) => {
    setCategories([...categories, category]);
  };

  const handleDeleteCategory = (categoryId: string) => {
    // Move events to uncategorized
    const updatedEvents = events.map(event => 
      event.category.id === categoryId 
        ? { ...event, category: categories.find(c => c.id === 'uncategorized') || defaultCategories[4] }
        : event
    );
    setEvents(updatedEvents);
    
    // Remove category
    setCategories(categories.filter(c => c.id !== categoryId));
  };

  const handleExport = (format: 'ics' | 'json' | 'csv') => {
    const options = {
      format,
      dateRange: { start: '2024-01-01', end: '2024-12-31' },
      includeRecurring: true
    };

    let content: string;
    let filename: string;
    let mimeType: string;

    switch (format) {
      case 'ics':
        content = exportToICS(events, options);
        filename = 'calendar-export.ics';
        mimeType = 'text/calendar';
        break;
      case 'json':
        content = exportToJSON(events, options);
        filename = 'calendar-export.json';
        mimeType = 'application/json';
        break;
      case 'csv':
        content = exportToCSV(events, options);
        filename = 'calendar-export.csv';
        mimeType = 'text/csv';
        break;
    }

    downloadFile(content, filename, mimeType);
  };

  const handleImport = (file: File) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      const content = e.target?.result as string;
      let result: any;

      if (file.name.endsWith('.json')) {
        result = importFromJSON(content);
      } else if (file.name.endsWith('.csv')) {
        result = importFromCSV(content);
      } else {
        alert('Unsupported file format. Please use JSON or CSV.');
        return;
      }

      if (result.success) {
        // Add imported events to existing events
        // Note: This is a simplified implementation
        alert(`Successfully imported ${result.eventsAdded} events!`);
      } else {
        alert(`Import failed: ${result.errors.join(', ')}`);
      }
    };
    reader.readAsText(file);
  };

  const selectedDateEvents = getEventsForDate(events, format(selectedDate, 'yyyy-MM-dd'));

  return (
    <div className={`min-h-screen transition-colors duration-300 ${
      isDark ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'
    }`}>
      {/* Header */}
      <header className={`sticky top-0 z-50 backdrop-blur-lg border-b transition-colors duration-300 ${
        isDark 
          ? 'bg-gray-900/80 border-gray-700' 
          : 'bg-white/80 border-gray-200'
      }`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              Calendar App
            </h1>
            
            <div className="flex items-center space-x-4">
              {/* Language Toggle */}
              <button
                onClick={toggleLanguage}
                className={`px-3 py-2 rounded-lg transition-all duration-200 ${
                  isDark
                    ? 'bg-gray-800 hover:bg-gray-700 text-gray-200'
                    : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
                }`}
                title="Toggle language"
              >
                {language === 'en' ? '🇯🇵 日本語' : '🇺🇸 English'}
              </button>
              
              {/* Theme Toggle */}
              <button
                onClick={toggleTheme}
                className={`p-2 rounded-lg transition-all duration-200 ${
                  isDark
                    ? 'bg-gray-800 hover:bg-gray-700 text-gray-200'
                    : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
                }`}
                title="Toggle theme"
              >
                {isDark ? '☀️' : '🌙'}
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Controls */}
      <div className={`sticky top-16 z-40 backdrop-blur-lg border-b transition-colors duration-300 ${
        isDark 
          ? 'bg-gray-900/80 border-gray-700' 
          : 'bg-white/80 border-gray-200'
      }`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            {/* View Toggle */}
            <div className="flex items-center space-x-2">
              {calendarViews.map((view) => (
                <button
                  key={view.type}
                  onClick={() => setCurrentView(view.type)}
                  className={`px-4 py-2 rounded-lg transition-all duration-200 ${
                    currentView === view.type
                      ? 'bg-blue-600 text-white shadow-lg'
                      : isDark
                        ? 'bg-gray-800 hover:bg-gray-700 text-gray-200'
                        : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
                  }`}
                >
                  {view.icon} {view.title}
                </button>
              ))}
            </div>
            
            {/* Action Buttons */}
            <div className="flex items-center space-x-3">
              <button
                onClick={() => setIsCategoryManagerOpen(true)}
                className={`px-4 py-2 rounded-lg transition-all duration-200 ${
                  isDark
                    ? 'bg-purple-600 hover:bg-purple-700 text-white'
                    : 'bg-purple-600 hover:bg-purple-700 text-white'
                }`}
              >
                🏷️ Categories
              </button>
              
              <div className="flex items-center space-x-2">
                <select
                  onChange={(e) => handleExport(e.target.value as 'ics' | 'json' | 'csv')}
                  className={`px-3 py-2 rounded-lg transition-all duration-200 ${
                    isDark
                      ? 'bg-gray-800 border-gray-700 text-gray-200'
                      : 'bg-white border-gray-300 text-gray-700'
                  }`}
                  defaultValue=""
                >
                  <option value="" disabled>Export</option>
                  <option value="ics">📅 ICS Calendar</option>
                  <option value="json">📄 JSON Data</option>
                  <option value="csv">📊 CSV File</option>
                </select>
                
                <label className={`px-4 py-2 rounded-lg cursor-pointer transition-all duration-200 ${
                  isDark
                    ? 'bg-green-600 hover:bg-green-700 text-white'
                    : 'bg-green-600 hover:bg-green-700 text-white'
                }`}>
                  📥 Import
                  <input
                    type="file"
                    accept=".json,.csv"
                    onChange={(e) => e.target.files?.[0] && handleImport(e.target.files[0])}
                    className="hidden"
                  />
                </label>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Calendar/Week View */}
          <div className="lg:col-span-3">
            {currentView === 'month' ? (
              <Calendar
                selectedDate={selectedDate}
                onDateSelect={handleDateSelect}
                onAddEvent={handleAddEvent}
                events={events}
                categories={categories}
              />
            ) : (
              <WeekView
                selectedDate={selectedDate}
                onDateSelect={handleDateSelect}
                onAddEvent={handleAddEvent}
                events={events}
                categories={categories}
              />
            )}
          </div>
          
          {/* Event List Sidebar */}
          <div className="lg:col-span-1">
            <EventList
              events={selectedDateEvents}
              selectedDate={selectedDate}
              onEditEvent={handleEditEvent}
              onDeleteEvent={handleDeleteEvent}
              onAddEvent={() => handleAddEvent(format(selectedDate, 'yyyy-MM-dd'))}
              categories={categories}
            />
          </div>
        </div>
      </main>

      {/* Event Modal */}
      {isModalOpen && (
        <EventModal
          isOpen={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          onSave={handleSaveEvent}
          editingEvent={editingEvent}
          selectedDate={selectedDateForModal}
          categories={categories}
        />
      )}

      {/* Category Manager Modal */}
      {isCategoryManagerOpen && (
        <CategoryManager
          isOpen={isCategoryManagerOpen}
          onClose={() => setIsCategoryManagerOpen(false)}
          categories={categories}
          onSaveCategory={handleSaveCategory}
          onDeleteCategory={handleDeleteCategory}
        />
      )}
    </div>
  );
};

const App: React.FC = () => {
  return (
    <ThemeProvider>
      <LanguageProvider>
        <AppContent />
      </LanguageProvider>
    </ThemeProvider>
  );
};

export default App; 